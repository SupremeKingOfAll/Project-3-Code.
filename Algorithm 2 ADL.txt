Algorithm: CalculateInfluenceScores(Graph)
Input: Graph (Weighted Adjacency List)
Output: MostInfluential (List of nodes with highest influence score)

Begin
    NodeCount ← Number of nodes in Graph
    InfluenceScores ← Empty Dictionary

    For each StartNode in Graph do
        Distances ← RunDijkstra(Graph, StartNode)
        TotalDistance ← 0

        For each Distance in Distances.Values do
            If Distance ≠ ∞ then
                TotalDistance ← TotalDistance + Distance
            End If
        End For

        Score ← (NodeCount - 1) / TotalDistance
        InfluenceScores[StartNode] ← Score
    End For

    MaxScore ← -∞
    MostInfluential ← Empty List

    For each Entry in InfluenceScores do
        If Entry.Score > MaxScore then
            MaxScore ← Entry.Score
            MostInfluential ← [Entry.Key]
        Else If Entry.Score = MaxScore then
            Append Entry.Key to MostInfluential
        End If
    End For

    Return MostInfluential
End

Subroutine: RunDijkstra(Graph, Source)
Begin
    Distances ← Dictionary with default ∞
    For each Node in Graph.Keys do
        Distances[Node] ← ∞
    End For
    Distances[Source] ← 0

    PriorityQueue ← SortedSet of (Distance, Node)
    Add (0, Source) to PriorityQueue

    While PriorityQueue is not empty do
        (CurrentDistance, CurrentNode) ← PriorityQueue.Min
        Remove PriorityQueue.Min

        For each (Neighbour, Weight) in Graph[CurrentNode] do
            NewDistance ← CurrentDistance + Weight

            If NewDistance < Distances[Neighbour] then
                Remove (Distances[Neighbour], Neighbour) from PriorityQueue
                Distances[Neighbour] ← NewDistance
                Add (NewDistance, Neighbour) to PriorityQueue
            End If
        End For
    End While

    Return Distances
End

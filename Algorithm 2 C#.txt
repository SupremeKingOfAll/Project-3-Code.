using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, List<(int, int)>> AdjacencyList = new Dictionary<int, List<(int, int)>>
        {
            { 0, new List<(int, int)> { (1, 2), (2, 4) } },
            { 1, new List<(int, int)> { (0, 2), (3, 1), (4, 3) } },
            { 2, new List<(int, int)> { (0, 4), (4, 2) } },
            { 3, new List<(int, int)> { (1, 1) } },
            { 4, new List<(int, int)> { (1, 3), (2, 2), (5, 1) } },
            { 5, new List<(int, int)> { (4, 1), (6, 2) } },
            { 6, new List<(int, int)> { (5, 2) } }
        };

        int NodeCount = AdjacencyList.Count;
        Dictionary<int, double> InfluenceScores = new Dictionary<int, double>();

        foreach (int StartNode in AdjacencyList.Keys)
        {
            Dictionary<int, int> Distances = RunDijkstra(AdjacencyList, StartNode);
            int TotalDistance = 0;
            foreach (int Distance in Distances.Values)
            {
                if (Distance != int.MaxValue)
                    TotalDistance += Distance;
            }

            double Score = (double)(NodeCount - 1) / TotalDistance;
            InfluenceScores[StartNode] = Score;
        }

        double MaxScore = double.MinValue;
        List<int> MostInfluential = new List<int>();

        foreach (var Kvp in InfluenceScores)
        {
            if (Kvp.Value > MaxScore)
            {
                MaxScore = Kvp.Value;
                MostInfluential = new List<int> { Kvp.Key };
            }
            else if (Kvp.Value == MaxScore)
            {
                MostInfluential.Add(Kvp.Key);
            }
        }

        Console.WriteLine("Most Influential Node(s): " + string.Join(", ", MostInfluential));
    }

    static Dictionary<int, int> RunDijkstra(Dictionary<int, List<(int, int)>> Graph, int Source)
    {
        Dictionary<int, int> Distances = new Dictionary<int, int>();
        foreach (int Node in Graph.Keys)
        {
            Distances[Node] = int.MaxValue;
        }

        Distances[Source] = 0;
        SortedSet<(int Distance, int Node)> PriorityQueue = new SortedSet<(int, int)>();
        PriorityQueue.Add((0, Source));

        while (PriorityQueue.Count > 0)
        {
            var (CurrentDistance, CurrentNode) = PriorityQueue.Min;
            PriorityQueue.Remove(PriorityQueue.Min);

            foreach (var (Neighbour, Weight) in Graph[CurrentNode])
            {
                int NewDistance = CurrentDistance + Weight;

                if (NewDistance < Distances[Neighbour])
                {
                    PriorityQueue.Remove((Distances[Neighbour], Neighbour));
                    Distances[Neighbour] = NewDistance;
                    PriorityQueue.Add((NewDistance, Neighbour));
                }
            }
        }

        return Distances;
    }
}
